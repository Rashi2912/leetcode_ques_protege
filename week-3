valid-parentheses 
class Solution {
public:
   bool isValid(string s) {
    stack<char> stk;
    for (int i = 0; i < s.size(); i++) {
        char c = s[i];
        if (c == '(' || c == '[' || c == '{') {
            stk.push(c);
        } else {
            if (stk.empty()) {
                return false;
            }
            char top = stk.top();
            stk.pop();
            if ((c == ')' && top != '(') ||
                (c == ']' && top != '[') ||
                (c == '}' && top != '{')) {
                return false;
            }
        }
    }
    return stk.empty();
}

};

Min Stack


Palindrome Linked List
class Solution {
public:
    bool isPalindrome(ListNode* head) {
    
        ListNode* ptr=head;
        vector<int> num;
        while(ptr->next != NULL){
            // ans=ans+to_string(ptr->val);
            num.push_back(ptr->val);
            ptr=ptr->next;
            if(ptr->next == NULL){
                // ans=ans+to_string(ptr->val);
                num.push_back(ptr->val);
            }
        }
        int end=num.size()-1;
        for(int i=0;i<num.size();i++){
            if(num[i]==num[end]){
                end--;
            }
            else{
                return 0;
            }
        }
        return 1;
       
    }
};
