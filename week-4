implement-stack-using-queues
class MyStack {
      queue<int> q1;
    queue<int> q2;
public:
       MyStack() {

    }

    void push(int x) {
        q2.push(x);
        while (!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1, q2);
    }

    int pop() {
        int x = q1.front();
        q1.pop();
        return x;
    }

    int top() {
        return q1.front();
    }

    bool empty() {
        return q1.empty();
    }  
    
};

implement-queue-using-stacks
class MyQueue {
    public:
 stack<int> s1;
    stack<int> s2;
    // MyQueue() {

    // }
    
    void push(int x) {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(x);       
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int a = s1.top();
        s1.pop();
        return a; 
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        return s1.empty();
    }
};

time-needed-to-buy-tickets
class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
      
        int count = 0, i = 0;

        while(tickets[k] != 0){
            if(i == tickets.size()){
                i = 0;
            }
            if(tickets[i] == 0){
                i++;
                continue;
            }
            tickets[i]--;
            count++;
            i++;
        }

        return count;
      
    }
};


number-of-students-unable-to-eat-lunch 


first-unique-number 

sliding-window-maximum 


Design Circular Queue
