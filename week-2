Middle of the linked list				
class Solution {
public: 
ListNode* middleNode(ListNode* head) {
 if(head == NULL || head->next == NULL)
            return head;

        ListNode* fast = head;
        ListNode* slow = head;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};

Delete node in a linked list	
 
class Solution {
public:
    void deleteNode(ListNode* node) {
    ListNode* nextNode = node->next;
        *node = *nextNode; // copy the contents of the next node into the current node
        delete nextNode; 
 
    } 
};


Swap Nodes in Pairs
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
       
        if(!head || !head->next) return head; //If there are less than 2 nodes in the given nodes, then no need to do anything just return the list as it is.
		
        ListNode* dummyNode = new ListNode();
        
        ListNode* prevNode=dummyNode;
        ListNode* currNode=head;
        
        while(currNode && currNode->next){
            prevNode->next = currNode->next;
            currNode->next = prevNode->next->next;
            prevNode->next->next = currNode;
            
            prevNode = currNode;
            currNode = currNode->next;
        }
        
        return dummyNode->next;
    }
    
};


Reorder Linked List
class Solution {
public:
void solve(ListNode *head, ListNode *next){
        if (head->next == NULL || head->next->next == NULL)  return;

     ListNode* end = head;
        ListNode* prev;
        while(end->next){
            prev=end;
            end=end->next;

        }
      next=head->next;
        head->next=end;
        end->next=next;
        head=end;
       prev->next = NULL;
        solve(head->next, next);


 }
    void reorderList(ListNode* head) {
        ListNode *end = head;
        ListNode *next = NULL;
        solve(end, next);

    
        
    }
};

Remove duplicates
class Solution {
public:
   ListNode* deleteDuplicates(ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }
    ListNode *prev = head;
    ListNode *cur = head->next;
    while (cur != NULL) {
        if (prev->val == cur->val) {
            prev->next = cur->next;
            delete cur;
            cur = prev->next;
        } else {
            prev = cur;
            cur = cur->next;
        }
    }
    return head;
}

};

Linked List Cycle

class Solution {
public:
   bool hasCycle(ListNode *head) {
    if(!head || !head->next){
        return false;
    }
    ListNode* fast = head;
    ListNode* slow = head;
    while(fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast){
            return true;
        }
    }
    return false;
}

    
};
